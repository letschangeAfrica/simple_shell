#include "shell.h"
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
void tokenize_command(char *command, char **tokens);
void handle_comments(char *command);
void handle_alias(char **args);
void handle_variables(char *args);
void execute_file(char *filename);
void execute_command(const char *command_path, char **args);
void tokenize_input(char *buffer, char **args);
void handle_exit(void);
void handle_setenv(char **args);
void handle_unsetenv(char **args);
void handle_env(void);
void execute_external_command(char **args);
void  handle_cd(char **args);

/**
 * main - central tour
 *@argc: integer
 *@argv: pointer
 * Return: 0 if SUCCESS
 */
int main(int argc, char *argv[])
{
char buffer[BUFFER_SIZE];
char prompt[] = "$ ";
int bytes_read, j;
char *args[BUFFER_SIZE];
int command_count = 0;
char *commands[BUFFER_SIZE];
if (argc > 1)
{
execute_file(argv[1]);
return (0);
}

while (1)
{
printf("%s", prompt);
bytes_read = read(STDIN_FILENO, buffer, BUFFER_SIZE);
if (bytes_read == 0)
{
printf("\n");
break;
}
if (bytes_read < 0)
{
perror("Error reading command");
continue;
}
buffer[bytes_read - 1] = '\0';
tokenize_command(buffer, commands);
for (j = 0; j < command_count; j++)
{
handle_comments(commands[j]);
handle_variables(commands[j]);
tokenize_input(buffer, args);
if (strcmp(args[0], "exit") == 0)
{
handle_exit();
break;
}
if (strcmp(args[0], "setenv") == 0)
{
handle_setenv(args);
continue;
}
if (strcmp(args[0], "unsetenv") == 0)
{
handle_unsetenv(args);
continue;
}
if (strcmp(args[0], "cd") == 0)
{
handle_cd(args);
continue;
}
if (strcmp(args[0], "alias") == 0)
{
handle_alias(args);
continue;
}
if (strcmp(args[0], "env") == 0)
{
handle_env();
continue;
}
execute_external_command(args);
}
}
return (0);
}
/**
 * handle_env - Handle env
 *
 * Return: nothing
 */

void handle_env(void)
{
char **env_var = environ;

while (*env_var != NULL)
{
printf("%s\n", *env_var);
env_var++;
}
}

/**
 * tokenize_command - tokenizes a command string into individual tokens
 *@command: a pointer to a string
 *@tokens: a pointer to a pointer to a string
 */

void tokenize_command(char *command, char **tokens)
{
int token_count = 0;
char *token = strtok(command, " ");
while (token != NULL && token_count < BUFFER_SIZE - 1)
{
tokens[token_count] = token;
token_count++;
token = strtok(NULL, " ");
}
tokens[token_count] = NULL;
}
/**
 * execute_external_command - check if the command exists in the path
 *@args: pointer to a pointer to a string
 * Return: nothing
 */

void execute_external_command(char **args)
{
char *path = getenv("PATH");
char *path_token = strtok(path, ":");
while (path_token != NULL)
{
char command_path[BUFFER_SIZE];
snprintf(command_path, BUFFER_SIZE, "%s/%s", path_token, args[0]);
if (access(command_path, X_OK) == 0)
{
execute_command(command_path, args);
return;
}
path_token = strtok(NULL, ":");
}
printf("Command nor found: %s\n", args[0]);
}

/**
 * execute_command - executes a command b forking a new process
 *@command_path: pointer
 *@args: pointer to a pointer
 */
void execute_command(const char *command_path, char **args)
{
pid_t pid = fork();
if (pid == 0)
{
execv(command_path, args);
fprintf(stderr, "Error: failed to execute command\n");
exit(1);
}
else if (pid > 0)
{
wait(NULL);
}
else
{
fprintf(stderr, "Error: failed to fork\n");
}
}

/**
 * handle_unsetenv - unsets an environment variable
 *@args: pointer to pointer to a string
 */
void handle_unsetenv(char **args)
{
if (args[1] == NULL)
{
fprintf(stderr, "Usage: unsetenv VARIABLE\n");
return;
}
if (unsetenv(args[1]) == -1)
{
perror("Error unsetting environment variable");
}
}

/**
 * handle_setenv - sets an environment variable
 * @args: pointer to a pointer to a string
 */
void handle_setenv(char **args)
{
if (args[1] == NULL || args[2] == NULL)
{
fprintf(stderr, "Usage: setenv VARIABLE VALUE\n");
return;
}
if (setenv(args[1], args[2], 1) == -1)
{
perror("Error settine environment variable");
}
}

/**
 * handle_exit - handle exit
 *
 * Return: nothing
 */

void handle_exit(void)
{
exit(0);
}
/**
 * handle_cd - handle command
 *@args: pointer to a pointer to a string
 * Return: nothing
 */

void  handle_cd(char **args)
{
char *directory = NULL;

if (args[1] == NULL)
{
directory = getenv("HOME");
if (directory == NULL)
{
fprintf(stderr, "Error getting home directory\n");
return;
}
}
else
{
directory = args[1];
}

if (chdir(directory) == -1)
perror("Error changing directory");
}


/**
 * handle_alias - handle aliases in a command
 *@args: a pointer to pointer to a string
 */
void handle_alias(char **args)
{
char *alias, *token;
if (args[1] == NULL)
{
alias = getenv("ALIAS");
if (alias != NULL)
{
token = strtok(alias, ",");
while (token != NULL)
{
printf("%s\n", token);
token = strtok(NULL, ",");
}
}
}
else
{
while (token != NULL)
{
printf("%s\n", token);
token = strtok(NULL, "=");
}
}
}
/**
 * handle_variables - replaces variables within acommandwithcorrespondingvalues
 *@args: a pointer to a string
 */

void handle_variables(char *args)
{
char *variable = strchr(args, '$');
if (variable != NULL)
{
char *value = getenv(variable + 1);
if (value != NULL)
{
size_t variable_length = strlen(variable);
size_t value_length = strlen(value);
size_t args_length = strlen(args);
char *new_args = malloc(args_length + value_length - variable_length + 1);
if (new_args == NULL)
{
fprintf(stderr, "Memory allocation failed\n");
return;
}
strncpy(new_args, args, variable - args);
strncpy(new_args + (variable - args), value, value_length);
strcpy(new_args + (variable - args) + value_length,
variable + variable_length);


handle_variables(new_args);
free(new_args);
}
}

}
/**
 * handle_comments - rmoves comments from a command
 * @command: a pointer to a string
 */
void handle_comments(char *command)
{
char *comment = strchr(command, '#');

if (comment != NULL)
{
*comment = '\0';
}
}
/**
 * execute_file - reads and execute command from a file
 * @filename: a pointer to a string
 */
void execute_file(char *filename)
{
FILE *file = fopen(filename, "r");
char *commands[BUFFER_SIZE];
int command_count = 0, j;
char line[BUFFER_SIZE];
char *args[BUFFER_SIZE];
if (file == NULL)
{
perror("Error opening file");
return;
}

while (fgets(line, BUFFER_SIZE, file) != NULL)
{
line[strcspn(line, "\n")] = '\0';
tokenize_command(line, commands);

for (j = 0; j < command_count; j++)
{
handle_comments(commands[j]);
handle_variables(commands[j]);

tokenize_command(commands[j], args);

if (strcmp(args[0], "setenv") == 0)
{
handle_setenv(args);
continue;
}

if (strcmp(args[0], "cd") == 0)
{
handle_cd(args);
continue;
}


if (strcmp(args[0], "alias") == 0)
{
handle_alias(args);
continue;
}
}
}

fclose(file);
}
handle_alias(args);
continue;
}
}
}

fclose(file);
}


/**


/**
 * tokenize_input - description
 *@buffer: a pointer to a string
 *@args: a pointer to a pointer to a string
 * Return: nothing
 */

void tokenize_input(char *buffer, char **args)
{
char *token = strtok(buffer, " ");
int arg_count = 0;
 * tokenize_input - description
 *@buffer: a pointer to a string
 *@args: a pointer to a pointer to a string
 * Return: nothing
 */

void tokenize_input(char *buffer, char **args)
{
char *token = strtok(buffer, " ");
int arg_count = 0;
while (token != NULL && arg_count < MAX_ARGS - 1)
{
args[arg_count] = token;
arg_count++;
token = strtok(NULL, " ");
}
args[arg_count] = NULL;
}
while (token != NULL && arg_count < MAX_ARGS - 1)
{
args[arg_count] = token;
arg_count++;
token = strtok(NULL, " ");
}
args[arg_count] = NULL;
}
